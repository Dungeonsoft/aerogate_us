using UnityEngine;
using System.Collections;
using System;

public class FirstLoadDataScript : MonoBehaviour
{
    public GameObject userLevel;
    public GameObject userLevelGage;
    public GameObject userLevelGageLabel;

    public GameObject flight000;
    public Texture[] flight000Skin;
    public GameObject flight000Bullet;
    public GameObject flight000BulletLabel;
    public GameObject flight000SkillLabel;

    public GameObject flight001;
    public Texture[] flight001Skin;
    public GameObject flight001Bullet;
    public GameObject flight001BulletLabel;
    public GameObject flight001SkillLabel;


    public GameObject flight002;
    public Texture[] flight002Skin;
    public GameObject flight002Bullet;
    public GameObject flight002BulletLabel;
    public GameObject flight002SkillLabel;

    public GameObject[] skinNameTag;
    public GameObject[] skinLockOffTag;
    public GameObject[] skinLevel;
    public GameObject[] skinlevelGage;


    //랭킹 표시를 위한 인스턴스 풀 생성//
    public GameObject friendRank;
    public int friendRankCount;
    //랭킹 표시를 위한 인스턴스 풀 생성//

    //받은 메세지 표시를 위한 인스턴스 풀 생성//
    public GameObject friendMessage;
    public int friendMessageCount;
    //받은 메세지 표시를 위한 인스턴스 풀 생성//

    
    int oldUserLevel;
    int addMedal = 0;
    int addCoin = 0;



    //플레이어 레벨이 오르는데 필요한 경험치.
    int[] userLevelpoint = { 120, 213, 317, 432, 560, 702, 860, 1036, 1231, 1448, 1689, 1957, 2254, 2584, 2951, 3359, 3812, 4316, 4876, 5498, 6189, 6957, 7810, 8758, 9811, 10981, 12281, 13726, 15331, 17114, 19096, 21298, 23744, 26462, 29482, 32838, 36567, 40710, 45313, 50428, 56111, 62426, 69442, 77238, 85900, 95524, 106218, 118100, 131302, 145971 };
   //플레이어의 레벨이 오를시 지급되는 보너스 코인양.
    int[] addCoinPerLevel = { 0, 0, 250, 250, 250, 1000, 500, 500, 500, 500, 1500, 750, 750, 750, 750, 2000, 1000, 1000, 1000, 2500, 1250, 1250, 1250, 1250, 3000, 1500, 1500, 1500, 1500, 3500, 1750, 1750, 1750, 1750, 4000, 2000, 2000, 2000, 2000, 4500, 2250, 2250, 2250, 2250, 5000, 2500, 2500, 2500, 2500, 6000 };

    int flightExperienceTemp;

    public HangarManager hangarManager;
    public CharacterMsgSndConScript characterMsgSndCon;

    bool gameEndResult;

    public int[] F00skinFullLevel;
    public int[] F01skinFullLevel;
    public int[] F02skinFullLevel;

    Hashtable skinFullLevel;

    void Awake()
    {
        //Debug.Log("FirstLoadDataScript ::: gameEndResult ::: " + ValueDeliverScript.gameEndResult);
        //인게임을 하고 들어온건지 아닌지 체크하는 변수 값 이 값이 true가 되어야만 결과창이 나오게 세팅이 됨.//
        gameEndResult = ValueDeliverScript.gameEndResult;
        skinFullLevel = new Hashtable();
        //스킨최고레벨 포인트 입력.
        {
            skinFullLevel.Add("Flight000Skin001", F00skinFullLevel[0]);
            skinFullLevel.Add("Flight000Skin002", F00skinFullLevel[1]);
			skinFullLevel.Add("Flight000Skin003", F00skinFullLevel[2]);
			skinFullLevel.Add("Flight000Skin004", F00skinFullLevel[3]);
			skinFullLevel.Add("Flight000Skin005", F00skinFullLevel[4]);
            skinFullLevel.Add("Flight001Skin001", F01skinFullLevel[0]);
			skinFullLevel.Add("Flight001Skin002", F01skinFullLevel[1]);
			skinFullLevel.Add("Flight001Skin003", F01skinFullLevel[2]);
			skinFullLevel.Add("Flight001Skin004", F01skinFullLevel[3]);
			skinFullLevel.Add("Flight001Skin005", F01skinFullLevel[4]);
            skinFullLevel.Add("Flight002Skin001", F02skinFullLevel[0]);
			skinFullLevel.Add("Flight002Skin002", F02skinFullLevel[1]);
			skinFullLevel.Add("Flight002Skin003", F02skinFullLevel[2]);
			skinFullLevel.Add("Flight002Skin004", F02skinFullLevel[3]);
			skinFullLevel.Add("Flight002Skin005", F02skinFullLevel[4]);
        }




        #region 경험치 누적을 통한 코인과 플레이어 레벨, 가스, 메탈의 증가를 계산하는 부분//
        //////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////경험치 누적을 통한 코인과 플레이어 레벨, 가스, 메탈의 증가를 계산하는 부분/////////////

        int userExp = ValueDeliverScript.userExp;
        int userLevel = ValueDeliverScript.userLevel;
        int coinRest = ValueDeliverScript.coinRest;
        int medalRest = ValueDeliverScript.medalRest;
        int gasRest = ValueDeliverScript.gasRest;
        int upgradePoint = ValueDeliverScript.upgradePoint;


            flightExperienceTemp = userExp;
            oldUserLevel = userLevel;

            //현재 나의 레벨이 얼마인지 파악하는 부분.
            for (int i = 0; i < userLevelpoint.Length; i++)
            {
                if (flightExperienceTemp - userLevelpoint[i] < 0)
                {
                    ValueDeliverScript.userLevel = i + 1;
                    userLevel = i + 1;
                    break;
                }
                else if (flightExperienceTemp - userLevelpoint[i] > 0)
                {
                    ValueDeliverScript.userLevel = i + 1;
                    userLevel = i + 1;
                }
                flightExperienceTemp -= userLevelpoint[i];
            }
            //현재 나의 레벨이 얼마인지 파악하는 부분.


            SkinFullLevelUpCheck(); //스킨의 레벨이 다 차서 더이상 오를수 있는지 아닌지 판별.

            if (gameEndResult && oldUserLevel < userLevel)    //레벨업을 했으면~
            {
                while (oldUserLevel < userLevel)
                {

                    //여기 들어오는지 확인할것.

                    //Debug.Log("여기에 들어오면 레벨업과 메달(다이아몬드)과 코인을 증가시켜준다.");

                    //Debug.Log("증가전 코인 ::: " + coinRest);
                    //Debug.Log("증가전 다이아몬드 ::: " + medalRest);

                    oldUserLevel++;
                    addMedal++;
                    addCoin += addCoinPerLevel[oldUserLevel];
                }

                coinRest += addCoin;
                medalRest += addMedal;
                //Debug.Log("증가후 코인 ::: " + coinRest);
                //Debug.Log("증가후 다이아몬드 ::: " + medalRest);

                GameObject.Find("ResultPanel").GetComponent<ResultEnableScript>().AddMedalFromLevelUp(1);

                //Debug.Log("AddMedalLabel   ::::   " + GameObject.Find("ResultPanel").transform.FindChild("ResultPanelLeft/LevelBox/AddMedalLabel").GetComponent<UILabel>().text);

                if (gasRest < 5)
                {
                    GameObject.Find("GameManager").GetComponent<GasTimeScript>().isChangeFuel = true;
                    GameObject.Find("GameManager").GetComponent<GasTimeScript>().gasTimeUi.GetComponent<UILabel>().text = "0:00";
                    //에너지가 다 찼음을 알려주는 메세지 띄움.
                }

                ValueDeliverScript.coinRest = coinRest;
                ValueDeliverScript.medalRest = medalRest;


                GameObject.Find("GasRestLabel").GetComponent<GasRestLabelScript>().GasRest(5, true);   //입력된 추가 연료 갯수를 화면에 표시하기 위한 함수 호출.
                GameObject.Find("GameManager").GetComponent<GasTimeScript>().CoinRecount(); //코인 카운트 변화 업뎃.
                GameObject.Find("GameManager").GetComponent<GasTimeScript>().MedalRecount();
                //레벨업 축하창&보상창 띄움.
                //여기에 보상창을 띄우면 됨.



                Debug.Log(" ::: Before GoToPilotLevelUpWindow ::: ");
                hangarManager.GoToPilotLevelUpWindow();
                StartCoroutine(HalfBLKPanelShow());

                hangarManager.pilotLevelUpWindow.GetComponent<PilotLevelUpWindowScript>().Activate(addCoin, addMedal);
                hangarManager.pilotLevelUpWindow.transform.localPosition = new Vector3(0, 0, -1100);
                //GameObject.Find("Windows").transform.FindChild("PilotLevelUpWindow").GetComponent<Collider>().enabled = false;
                StartCoroutine(TouchFalse());
                //기본 결과창에 레벨업 아이콘을 표시하여 준다..
                GameObject.Find("Windows").transform.FindChild("ResultPanel/ResultPanelLeft/LevelBox/PilotLevel/LevelUpIcon").gameObject.SetActive(true);
                addMedal = 0;
                addCoin = 0;

            }
            else
            {
                if (hangarManager.isSkinFullLevel)   //스킬의 레벨이 올라서 꽉 찾는지 검사해서 꽉 찾으면 보상을 줌.
                {
                    upgradePoint += 2;
                    hangarManager.upgradePointWindow.transform.FindChild("PointAdd").GetComponent<UILabel>().text = "X 2";
                    hangarManager.flightUpointSetScript.RedrawStatePoint();
                    hangarManager.ShowUpgradePointWindow();
                }
            }


        //결과창에 유저레벨 표시.

        hangarManager.ResultPanel.transform.FindChild("ResultPanelLeft/LevelBox/PilotLevel/UserLevelLabel").GetComponent<UILabel>().text = userLevel.ToString("00");

        ///////////////경험치 누적을 통한 코인과 플레이어 레벨, 가스, 메탈의 증가를 계산하는 부분/////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////
        #endregion


        StartCoroutine(RescueFriendLoad());   //임시로 친구 구출 인원 표시되도록 만드는것 후에 이와 연결된 함수를 구성해서 연결시켜야함.

    }

    IEnumerator HalfBLKPanelShow()
    {
        yield return null;
        GameObject.Find("Windows").transform.FindChild("HalfBLKPanel").gameObject.SetActive(true);
    }

    void SkinFullLevelUpCheck()
    {
        if (ValueDeliverScript.skinNumber != 0)
        {
            int nowPoint = 0;
            switch (ValueDeliverScript.flightNumber)
            {
                case 0: switch (ValueDeliverScript.skinNumber)
                    {
                        case 1: nowPoint = ValueDeliverScript.FlightExp000Skin001; break;
                        case 2: nowPoint = ValueDeliverScript.FlightExp000Skin002; break;
                        case 3: nowPoint = ValueDeliverScript.FlightExp000Skin003; break;
                        case 4: nowPoint = ValueDeliverScript.FlightExp000Skin004; break;
                        case 5: nowPoint = ValueDeliverScript.FlightExp000Skin005; break;
                    } break;
                case 1: switch (ValueDeliverScript.skinNumber)
                    {
                        case 1: nowPoint = ValueDeliverScript.FlightExp001Skin001; break;
                        case 2: nowPoint = ValueDeliverScript.FlightExp001Skin002; break;
                        case 3: nowPoint = ValueDeliverScript.FlightExp001Skin003; break;
                        case 4: nowPoint = ValueDeliverScript.FlightExp001Skin004; break;
                        case 5: nowPoint = ValueDeliverScript.FlightExp001Skin005; break;
                    } break;
                case 2: switch (ValueDeliverScript.skinNumber)
                    {
                        case 1: nowPoint = ValueDeliverScript.FlightExp002Skin001; break;
                        case 2: nowPoint = ValueDeliverScript.FlightExp002Skin002; break;
                        case 3: nowPoint = ValueDeliverScript.FlightExp002Skin003; break;
                        case 4: nowPoint = ValueDeliverScript.FlightExp002Skin004; break;
                        case 5: nowPoint = ValueDeliverScript.FlightExp002Skin005; break;
                    } break;
            }
            int oldPoint = nowPoint - ValueDeliverScript.skinExp;

            string skinName = "Flight" + ValueDeliverScript.flightNumber.ToString("D3") + "Skin" + ValueDeliverScript.skinNumber.ToString("D3");

            if (nowPoint >= int.Parse(skinFullLevel[skinName].ToString()) && oldPoint < int.Parse(skinFullLevel[skinName].ToString()))
            {
                hangarManager.isSkinFullLevel = true;
            }
        }
    }


    public GameObject[] rescueFriendPicObj; //결과창에 나오는 구출친구 이미지 표시하는 부분.
    string[] rescueFriend;
    public GameObject rescueFriendTab;


    GameObject picObj;
    IEnumerator RescueFriendLoad()  //임시로 친구 구출 인원 표시되도록 만드는것 후에 이와 연결된 함수를 구성해서 연결시켜야함.
    {
        Debug.Log("rescueFriendId :: " + ValueDeliverScript.rescueFriendId);
        rescueFriend = ValueDeliverScript.rescueFriendId.Split(',');

        if (rescueFriend[0] == "")
            GameObject.Find("RescueTopMessageText").GetComponent<UILabel>().text = "You have rescued no friend!!";
        else if (rescueFriend.Length > 0)
        {
            GameObject.Find("RescueTopMessageText").GetComponent<UILabel>().text = "You rescued " + rescueFriend.Length + " friends! (Buddy Points +" + rescueFriend.Length + ")";
            ValueDeliverScript.buddyPoint = ValueDeliverScript.buddyPoint + rescueFriend.Length;
            GameObject.Find("PrepareReady").GetComponent<PrepareReadyScript>().GageSetting();//인터페이스상에서 추가된 점수가 보이게 만든다.
        }

        ValueDeliverScript.rescueFriendId = ""; //구출한 친구목록 초기화. 이걸 하지 않으면 다음번 구출 친구 목록이 이전것과 겹쳐 꼬인다.

        //친구 사진을 대신하는 아이콘(이미지)를 켜줌.
        Transform rescueInfo = GameObject.Find("RescueInfo").transform;
        int count = rescueInfo.childCount;


        int rescueCount = rescueFriend.Length;

        if (rescueCount > count) rescueCount = count;

        if (rescueFriend[0] != "")
        {
            for (int i = 0; i < rescueCount; i++)
            {
                Debug.Log("친구 구함 ::: " + "FriendImg00" + (i+1) + "Base ::: " + rescueFriend[i]);
                picObj = rescueInfo.FindChild("FriendImg00" + (i+1) + "Base").gameObject;
                picObj.SetActive(true);
                picObj.GetComponent<UITexture>().mainTexture = FindFriPhoto(rescueFriend[i]);
            }
        }
        //친구 사진을 대신하는 아이콘(이미지)를 켜줌.
        yield break;
    }

    Texture fTex;
    int fLength;
    Texture FindFriPhoto(string fId)
    {
        Debug.Log(":: FindFriPhoto ::");
        int rLength = 0;
        if (ValueDeliverScript.rankDataFB.Length == null) rLength = 0;
        else rLength = ValueDeliverScript.rankDataFB.Length;
        fLength = rLength;
        for (int i = 0; i < fLength; i++ )
        {
            if (ValueDeliverScript.rankDataFB[i].FbId == fId)
            {
                //여기 와서 텍스쳐 가져감//
                Debug.Log("여기 와서 텍스쳐 가져감: 패북아이디 :: " + ValueDeliverScript.rankDataFB[i].FbId + "::" + fId);
                fTex = ValueDeliverScript.rankDataFB[i].FbPic;
                Debug.Log("ValueDeliverScript.rankDataFB[i].FbPic.texelSize :: " + ValueDeliverScript.rankDataFB[i].FbPic.texelSize);
                Debug.Log("fTex.texelSize :: " + fTex.texelSize);
                break;
            }
        }
        return fTex;
    }


    IEnumerator TouchFalse()
    {
        yield return new WaitForSeconds(10f);
    }

    IEnumerator FirstSoundPlay()
    {
        int activeOper = ValueDeliverScript.activeOper;

        yield return new WaitForSeconds(1.5f);
        if (gameEndResult)
        {
            characterMsgSndCon.LoadingGame(activeOper);
        }
        else if (ValueDeliverScript.isBreakGame)
        {
            characterMsgSndCon.BreakGame(activeOper);
            ValueDeliverScript.isBreakGame = false;
        }
        else
        {
            characterMsgSndCon.LoadingBirth(activeOper);
        }
    }

    void Start()
    {
        StartCoroutine(FirstSoundPlay());
        #region when Come In Hanger From InGame, Checking Function about Skin Lock.
        //아래 함수는 게임 시작하면  또는 인게임에서 격납고로 돌아왔을때 스킨 락을 해제 할것이 없는가 체크하는 부분.//단 한번만 실행해야 되니 또 다른 곳에서 실행하지 않게 할것.
        FlightLockOffCheck();   
        #endregion

        int userLevelVal = ValueDeliverScript.userLevel;

        int flight000SkinVal = ValueDeliverScript.flight000Skin;
        int flight000BulletVal = ValueDeliverScript.flight000Bullet;
        int flight000SkillVal = ValueDeliverScript.flight000Skill;

        int flight001SkinVal = ValueDeliverScript.flight001Skin;
        int flight001BulletVal = ValueDeliverScript.flight001Bullet;
        int flight001SkillVal = ValueDeliverScript.flight001Skill;

        int flight002SkinVal = ValueDeliverScript.flight002Skin;
        int flight002BulletVal = ValueDeliverScript.flight002Bullet;
        int flight002SkillVal = ValueDeliverScript.flight002Skill;

        userLevel.GetComponent<UILabel>().text = userLevelVal.ToString("00");

        //지정한 유저 이름(Name)을 표시한다.
        GameObject.Find("NameTag/Name").GetComponent<UILabel>().text = ValueDeliverScript.Nick;

        //유저경험치를 화면내 게이지에 표시하여 준다.
        hangarManager.ResultPanel.transform.FindChild("ResultPanelLeft/LevelBox/PilotLevel/UserLevelGageBar").GetComponent<UIFilledSprite>().fillAmount =    //결과창에 나오는 파일럿 레벨게이지바의 표시를 위해 삽입한 문장.

        userLevelGage.GetComponent<UIFilledSprite>().fillAmount = (float)flightExperienceTemp / userLevelpoint[userLevelVal - 1];

        hangarManager.ResultPanel.transform.FindChild("ResultPanelLeft/LevelBox/PilotLevel/UserLevelGageBarPercentLabel").GetComponent<UILabel>().text =      //결과창에 나오는 파일럿 레벨게이지바 퍼센트의 표시를 위해 삽입한 문장.
        userLevelGageLabel.GetComponent<UILabel>().text = ((int)(((float)flightExperienceTemp / userLevelpoint[userLevelVal - 1]) * 100)).ToString("D2") + "%";

        flight000.renderer.material.mainTexture = flight000Skin[flight000SkinVal];
        flight000Bullet.GetComponent<UISprite>().spriteName = "Bullet00_" + flight000BulletVal.ToString("D3");
        flight000Bullet.GetComponent<UISprite>().MakePixelPerfect();
        //flight000Bullet.transform.localScale = new Vector3(flight000Bullet.transform.localScale.x * 0.4f, flight000Bullet.transform.localScale.y * 0.4f, flight000Bullet.transform.localScale.z);

        flight000BulletLabel.GetComponent<UILabel>().text = flight000BulletVal.ToString("D2");
        flight000SkillLabel.GetComponent<UILabel>().text = flight000SkillVal.ToString("D2");

        flight001.renderer.material.mainTexture = flight001Skin[flight001SkinVal];
        flight001Bullet.GetComponent<UISprite>().spriteName = "Bullet01_" + flight001BulletVal.ToString("D3");
        flight001Bullet.GetComponent<UISprite>().MakePixelPerfect();
        //flight001Bullet.transform.localScale = new Vector3(flight001Bullet.transform.localScale.x * 0.4f, flight001Bullet.transform.localScale.y * 0.4f, flight001Bullet.transform.localScale.z);

        flight001BulletLabel.GetComponent<UILabel>().text = flight001BulletVal.ToString("D2");
        flight001SkillLabel.GetComponent<UILabel>().text = flight001SkillVal.ToString("D2");

        flight002.renderer.material.mainTexture = flight002Skin[flight002SkinVal];
        flight002Bullet.GetComponent<UISprite>().spriteName = "Bullet02_" + flight002BulletVal.ToString("D3");
        flight002Bullet.GetComponent<UISprite>().MakePixelPerfect();
        //flight002Bullet.transform.localScale = new Vector3(flight002Bullet.transform.localScale.x * 0.4f, flight002Bullet.transform.localScale.y * 0.4f, flight002Bullet.transform.localScale.z);

        flight002BulletLabel.GetComponent<UILabel>().text = flight002BulletVal.ToString("D2");
        flight002SkillLabel.GetComponent<UILabel>().text = flight002SkillVal.ToString("D2");

        //기본 비행기 선택창에 선택된 스킨의 이름 표시.

            skinNameTag[0].GetComponent<UILabel>().text = hangarManager.skinSelectWindow00.transform.FindChild("Skin/Skin" + flight000SkinVal.ToString("00")).GetComponent<PositionSkinSendScript>().skinKoreaName;
            skinNameTag[1].GetComponent<UILabel>().text = hangarManager.skinSelectWindow01.transform.FindChild("Skin/Skin" + flight001SkinVal.ToString("00")).GetComponent<PositionSkinSendScript>().skinKoreaName;
            skinNameTag[2].GetComponent<UILabel>().text = hangarManager.skinSelectWindow02.transform.FindChild("Skin/Skin" + flight002SkinVal.ToString("00")).GetComponent<PositionSkinSendScript>().skinKoreaName;
        //기본 비행기 선택창에 선택된 스킨의 이름 표시.

            SkinlockOffCount();//소유 스킨 갯수 표시.

        if (ValueDeliverScript.skinNumber == 0) //디폴트스킨이면 결과창에 스킨 레벨 관련 데이터 안보이게 함.
        {
            GameObject.Find("Windows").transform.FindChild("ResultPanel/ResultPanelLeft/LevelBox/SkinLevel").gameObject.SetActive(false);
        }

        //랭킹 탭 정보 표시
        if (ValueDeliverScript.isTutComplete == 2)
        {
            //Debug.Log("isTutComplete ::: 2");
            //매일 출석 보상
            LoginEvent();

            //랭크 등수 정렬//페이스북 아이디가 있을경우만 친구 랭킹을 표시해준다.
            if (ValueDeliverScript.myFBid != "")
            {
                FriendRankTabSetting(friendData: ValueDeliverScript.rankDataFB, parentT: hangarManager.friendWeekTab.transform, isFB: true);
            }

            //페이스북에 관계 없이 게임의 월드 랭킹을 표시해주기 위한 리더보드 구성.
            FriendRankTabSetting(friendData: ValueDeliverScript.worldRank, parentT: hangarManager.wRankab.transform, isFB: false);
        }

        //받은 메세지 표시//
        MessageTabSetting();

    }

    public void MessageTabSetting()
    {
        MessageDataS[] messageData = ValueDeliverScript.messageData;
        GameObject friendMailTab = hangarManager.friendMailTab;

        if (messageData.Length == 0) { friendMailTab.SetActive(false); return; }


        for (int i = 0; i < messageData.Length; i++)
        {
            //인스턴스로 메세지를 하나 생성//
            GameObject messageTab = Instantiate(friendMessage) as GameObject;
            //이름을 변경함//
            messageTab.GetComponent<MessageTabScript>().messageTab = messageData[i];
            
            //만약 메세지가 시간을 기록하고 있지 않으면 강제로 시간을 기록하여 넣어준다//
            string msgTime = messageTab.GetComponent<MessageTabScript>().messageTab.Time;
            if (msgTime == "" || msgTime == null)
            {
                ValueDeliverScript.messageData[i].Time = messageTab.GetComponent<MessageTabScript>().messageTab.Time = DateTime.UtcNow.ToBinary().ToString();
            }

            messageTab.name = "friendMessage" + i;
            //위치값을 임시로 지정//메소드 진행중 변경//
            Vector3 pos = messageTab.transform.localPosition;

            //메세지 탭을 메세지 그리드에 차일드로 종속시킴//
            messageTab.transform.parent = friendMailTab.transform;
            //화면에 보이도록  액티브를 켬//
            messageTab.SetActive(true);
            //크기를 재지정함//
            messageTab.transform.localScale = new Vector3(1, 1, 1);
            //위치를 재지정함//
            messageTab.transform.localPosition = new Vector3(pos.x, pos.y, 0);

            //메세지를 보낸 친구 이름과 사진 찾기//
            //0.받아올 이름과 사진의 그릇이 될 임시 변수를 선언한다//
            string nick = "";
            Texture fbPic = null;
            //1.친구 랭크 데이터를 가지고 온다//
            RankDataS[] friendRankFB = ValueDeliverScript.rankDataFB;
            //현재 메세지를 보낸 친구 페북 아이디를 추출한다//
            string buddyFbId = messageData[i].From;
            //for문을 돌려 같은 이름의 친구가 있는지 확인한다//
            //확인하여 닉네임과 사진을 추추한다//
            for (int j = 0; j < friendRankFB.Length; j++)
            {
                if (buddyFbId == friendRankFB[j].FbId)
                {
                    nick = friendRankFB[j].NickName;
                    fbPic = friendRankFB[j].FbPic;
                    break;
                }
            }
            //각각의 오브젝트들(아이템이미지,니네임등)을 보여준다//
            //선물을 입력한다//
            //보내온 메세지 내용이 무엇인지 파악한다//
            string giftName ="icon_fuel";
            switch (messageData[i].Type)
            {
                case "1":
                    giftName = "icon_fuel"; break;
                case "2":
                    giftName = "icon_gold"; break;
                case "3":
                    giftName = "icon_deco"; break;
                case "4":
                    giftName = "Icn_AP"; break;
            }
            messageTab.transform.Find("FuelIcon").GetComponent<UISprite>().spriteName = giftName;
            messageTab.transform.Find("FuelIcon").GetComponent<UISprite>().MakePixelPerfect();

            //닉네임을 입력한다//
            messageTab.transform.Find("UserName").GetComponent<UILabel>().text = nick;
           
            //친구 사진을 입력한다//
            if (fbPic != null)
            {
                messageTab.transform.Find("UserPhoto").gameObject.SetActive(true);
                messageTab.transform.Find("UserPhoto").GetComponent<UITexture>().mainTexture = fbPic;
            }

            //친구에게 보내는 메세지를 표시한다//
            //메세지 내용이 무엇인지 파악한다//
            string msg;
            switch (messageData[i].Contents)
            {
                case "1": msg = "Got Fuels!"; break;

                case "2": msg = "Got golds!"; break;

                case "3": msg = "Got Diamonds!"; break;
          
                case "4": msg = "Got Ab Points"; break;

                default: msg = messageData[i].Contents ; break;
            }
            messageTab.transform.Find("Message").GetComponent<UILabel>().text = msg;
            //Debug.LogError("잠심 멈추고 메세지 생성 되었는가 확인");
        }
    }

    void LoginEvent()
    {
        //Debug.Log("LoginEvent");
        //ShowLoginEventWin(6); //테스트용 코드.

        if (!PlayerPrefs.HasKey("LoginDate"))
        {

            string[] loginDate = DateTime.Now.GetDateTimeFormats();
            PlayerPrefs.SetString("LoginDate", loginDate[0]);
            PlayerPrefs.SetInt("AddDate", 1);
            //첫 로그인이니 무조건 첫날 보상창을 띄움.
            ShowLoginEventWin(1);
        }
        else
        {
            string oldDate = PlayerPrefs.GetString("LoginDate");
            string today = DateTime.Now.GetDateTimeFormats()[0];
            DateTime oDate = DateTime.Parse(oldDate);
            DateTime tDay = DateTime.Parse(today);
            int intervalDay = (tDay - oDate).Days;

            PlayerPrefs.SetString("LoginDate", today);

            if (intervalDay == 1)
            {
                //값이 1이라는 것은 어제 접속하고 오늘 접속했다는 것 그러니 더해지는 날을.
                //추가 1을 해준다음.. 더해진 날의 보상을 보여주는 창을 띄운다.
                int addDate = PlayerPrefs.GetInt("AddDate");
                addDate++;
                PlayerPrefs.SetInt("AddDate", addDate);

                //여기서 창을 띄움.
                //10이 넘어가면 보상창의 모든 내용을 다 받은것이기에 다시 1일부터 시작한다.
                if (addDate > 10)
                {
                    PlayerPrefs.SetInt("AddDate", 1);
                    //1일차 보상을 띄움.
                    ShowLoginEventWin(1);
                }
                else
                {
                    //날짜에 맞는 보상창을 띄움.
                    ShowLoginEventWin(addDate);
                }
            }

            //하루 이상 거르게 되면 연속 로그인이 초기화 되서 다시 1일부터 시작한다.
            if (intervalDay > 1)
            {
                PlayerPrefs.SetInt("AddDate", 1);
                //1일차 보상을 띄움
                ShowLoginEventWin(1);
            }
        }
    }

    void ShowLoginEventWin(int date)
    {
        GameObject LoginEventWin = GameObject.Find("Windows").transform.FindChild("LoginEventWin").gameObject;
        GameObject[] rewardTab = new GameObject[10];
        GameObject hilight = LoginEventWin.transform.FindChild("Rewards/Hilight").gameObject;

        LoginEventWin.SetActive(true);

        for (int i = 0; i < 10; i++)
        {
            rewardTab[i] = LoginEventWin.transform.FindChild("Rewards/Reward" + (i + 1).ToString("00")).gameObject;
        }

        for (int i = 0; i < date; i++)
        {
            if(i>0) rewardTab[i-1].GetComponent<UIPanel>().alpha = 0.35f;
            rewardTab[i].transform.FindChild("Check").GetComponent<UISprite>().spriteName = "Btn_CheckBox01";
        }

        float hPositionX = -280;
        float hPositionY = 72;

        int xAdd = 140;
        int yAdd = -165;

        int multiValX = (date - 1) % 5;
        int multiValY = (date - 1) / 5;

        hPositionX = hPositionX + (xAdd * multiValX);
        hPositionY = hPositionY + (yAdd * multiValY);

        hilight.transform.localPosition = new Vector3(hPositionX, hPositionY, 0);

        ReceiveLoginReward(date);
    }

    void CloseLoginEventWin()
    {
        GameObject.Find("Windows").transform.FindChild("LoginEventWin").gameObject.SetActive(false);
    }

    void ReceiveLoginReward(int date)
    {
        switch (date)
        {
            case 1: ValueDeliverScript.EquipBomb01 = ValueDeliverScript.EquipBomb01 + 3; break;
            case 2: ValueDeliverScript.EquipReinforce08 = ValueDeliverScript.EquipReinforce08 + 3; break;
            case 3: ValueDeliverScript.coinRest = ValueDeliverScript.coinRest + 2000; break;
            case 4: ValueDeliverScript.EquipAssist01 = ValueDeliverScript.EquipAssist01 + 2; break;
            case 5: ValueDeliverScript.medalRest = ValueDeliverScript.medalRest + 5; break;
            case 6: ValueDeliverScript.EquipBomb05 = ValueDeliverScript.EquipBomb05 + 5; break;
            case 7: ValueDeliverScript.coinRest = ValueDeliverScript.coinRest + 5000; break;
            case 8: ValueDeliverScript.EquipReinforce07 = ValueDeliverScript.EquipReinforce07 + 5; break;
            case 9: ValueDeliverScript.coinRest = ValueDeliverScript.coinRest + 12000; break;
            case 10: ValueDeliverScript.medalRest = ValueDeliverScript.medalRest + 20; break;
        }

        //로그인 리워드일 때는 서버에 한번 저장을 한다//
        ValueDeliverScript.SaveGameData();

        GetComponent<GasTimeScript>().MedalRecount(); //화면에 표시되는 메달양을 다시 계산하여 재표시하여줌.
        GetComponent<GasTimeScript>().CoinRecount(); //화면에 표시되는 동전양을 다시 계산하여 재표시하여줌.
        GetComponent<HangarManager>().LoadEquip(); //이큅창들에 들어가는 아이템 표시를 다시 계산하고.
        GetComponent<HangarManager>().EquipStartSetting(); //1173번줄에 있는 이큅스타트세팅 함수를 호출.
    }

    //게임친구탭에 쓰일 변수들만 따로 모음//
    GameFriendTabScript gFrndScript;
    string reinforceS = "Icn_AP";
    string diamondS = "icon_deco";
    string coinS = "icon_gold";
    //게임친구탭에 쓰일 변수들만 따로 모음//
    //게임친구탭에 보상 아이템을 보여줄때 정리해주는 메소드//
    void RankTabRewardItemShow(bool[] isShow, string[] name, string[] count)
    {
        gFrndScript.item[0].item[0].SetActive(isShow[0]);
        gFrndScript.item[0].item[1].SetActive(isShow[0]);
        gFrndScript.item[0].item[2].SetActive(isShow[0]);
        gFrndScript.item[0].item[0].GetComponent<UISprite>().spriteName = name[0];
        gFrndScript.item[0].item[0].GetComponent<UISprite>().MakePixelPerfect();
        gFrndScript.item[0].item[2].GetComponent<UILabel>().text = count[0];

        gFrndScript.item[1].item[0].SetActive(isShow[1]);
        gFrndScript.item[1].item[1].SetActive(isShow[1]);
        gFrndScript.item[1].item[2].SetActive(isShow[1]);
        gFrndScript.item[1].item[0].GetComponent<UISprite>().spriteName = name[1];
        gFrndScript.item[1].item[0].GetComponent<UISprite>().MakePixelPerfect();
        gFrndScript.item[1].item[2].GetComponent<UILabel>().text = count[1];

        gFrndScript.item[2].item[0].SetActive(isShow[2]);    //아이템//
        gFrndScript.item[2].item[1].SetActive(isShow[2]);    //바탕굴림사각형//
        gFrndScript.item[2].item[2].SetActive(isShow[2]);    //갯수//
        gFrndScript.item[2].item[0].GetComponent<UISprite>().spriteName = name[2];  //아이템이름//
        gFrndScript.item[2].item[0].GetComponent<UISprite>().MakePixelPerfect();     //아이템크기재조정//
        gFrndScript.item[2].item[2].GetComponent<UILabel>().text = count[2];        //받을수 있는 아이템 갯수//
    }
    //게임친구탭에 보상 아이템을 보여줄때 정리해주는 메소드//

    void FriendRankTabSetting(RankDataS[] friendData , Transform parentT , bool isFB = true)
    {
        //친구 데이터가 하나도 없다면 이 메서드로 들어온 리더보드는 보이지 않게 한고 메서드 전체를 실행하지 않고 그냥 리턴한다//
        if (friendData.Length == 0) { parentT.gameObject.SetActive(false); return; }

        Debug.Log(" ::::: FriendRankTabSetting ::::: " + parentT.name);
        BubbleSorting(friendData);    // 우선 친구 점수를 기준으로 한 랭킹 정렬.

        for (int i = 0; i < friendData.Length; i++)
        {
            GameObject friendRankTab = Instantiate(friendRank) as GameObject;
            friendRankTab.name = "friendRank" + i;
            Vector3 pos = friendRankTab.transform.localPosition;

            friendRankTab.transform.parent = parentT;
            friendRankTab.SetActive(true);
            friendRankTab.transform.localScale = new Vector3(1, 1, 1);

            friendRankTab.transform.localPosition = new Vector3(pos.x, pos.y, 0);

            Debug.Log(i + " NickName ::: " + friendData[i].NickName);
            Debug.Log(i + " Score ::: " + friendData[i].TWeekScore);
            friendRankTab.transform.FindChild("UserName").GetComponent<UILabel>().text = friendData[i].NickName;
            friendRankTab.transform.FindChild("Score").GetComponent<UILabel>().text = friendData[i].TWeekScore;

            //20140925 추가 //프로필 사진이 있으면 나오게 만듬(페북 아이디가 있다면 사진을 보여줌)//
            if (friendData[i].FbId != "" && friendData[i].FbId != null && friendData[i].FbId != "0")
            {
                Debug.Log("행거 사진 박음?");
                friendRankTab.transform.FindChild("UserPhoto").GetComponent<UITexture>().mainTexture = friendData[i].FbPic;
            }

            friendRankTab.GetComponent<GameFriendTabScript>().inputFriendInfo(friendData[i]);


            gFrndScript = friendRankTab.GetComponent<GameFriendTabScript>();
            string myNick = ValueDeliverScript.Nick;
            string myScore = ValueDeliverScript.scoreHigh.ToString();
            string fuelSendTime = gFrndScript.friendInfo.FuelSendTime;
            GameObject gasStatusOff = gFrndScript.gasStatusOff;
            GameObject fuelRemainTime = gFrndScript.fuelRemainTime;
            GameObject gasStatusOn = gFrndScript.gasStatusOn;
            
            //탭에 보상 아이템 보이기//
            if (isFB == true)   //페북 친구 랭킹일 때
            {
                switch (i)
                {
                    case 0: { RankTabRewardItemShow(new bool[] { true, false, false }, new string[] { reinforceS, "", "" }, new string[] { "+1", "", "" }); break; }
                    case 1: { RankTabRewardItemShow(new bool[] { true, false, false }, new string[] { diamondS, "", "" }, new string[] { "+5", "", "" }); break; }
                    case 2: { RankTabRewardItemShow(new bool[] { true, false, false }, new string[] { coinS, "", "" }, new string[] { "+2500", "", "" }); break; }
                    default: { RankTabRewardItemShow(new bool[] { false, false, false }, new string[] { "", "", "" }, new string[] { "", "", "" }); break; }
                }
            }
            else if (isFB == false) //월드 랭킹일 때
            {
                switch (i)
                {
                    case 0: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+5", "+30000", "30" }); break; }
                    case 1: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+4", "+25000", "25" }); break; }
                    case 2: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+3", "+20000", "20" }); break; }
                    case 3: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+2", "+10000", "15" }); break; }
                    case 4: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+2", "+10000", "15" }); break; }
                    case 5: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+2", "+10000", "15" }); break; }
                    case 6: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+2", "+10000", "15" }); break; }
                    case 7: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+2", "+10000", "15" }); break; }
                    case 8: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+2", "+10000", "15" }); break; }
                    case 9: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+2", "+10000", "15" }); break; }

                    case 10: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+1", "+7500", "10" }); break; }
                    case 11: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+1", "+7500", "10" }); break; }
                    case 12: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+1", "+7500", "10" }); break; }
                    case 13: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+1", "+7500", "10" }); break; }
                    case 14: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+1", "+7500", "10" }); break; }
                    case 15: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+1", "+7500", "10" }); break; }
                    case 16: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+1", "+7500", "10" }); break; }
                    case 17: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+1", "+7500", "10" }); break; }
                    case 18: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+1", "+7500", "10" }); break; }
                    case 19: { RankTabRewardItemShow(new bool[] { true, true, true }, new string[] { reinforceS, coinS, diamondS }, new string[] { "+1", "+7500", "10" }); break; }

                    case 20: { RankTabRewardItemShow(new bool[] { false, true, true }, new string[] { "", coinS, diamondS }, new string[] { "", "+5000", "30" }); break; }
                    case 21: { RankTabRewardItemShow(new bool[] { false, true, true }, new string[] { "", coinS, diamondS }, new string[] { "", "+5000", "30" }); break; }
                    case 22: { RankTabRewardItemShow(new bool[] { false, true, true }, new string[] { "", coinS, diamondS }, new string[] { "", "+5000", "30" }); break; }
                    case 23: { RankTabRewardItemShow(new bool[] { false, true, true }, new string[] { "", coinS, diamondS }, new string[] { "", "+5000", "30" }); break; }
                    case 24: { RankTabRewardItemShow(new bool[] { false, true, true }, new string[] { "", coinS, diamondS }, new string[] { "", "+5000", "30" }); break; }
                    case 25: { RankTabRewardItemShow(new bool[] { false, true, true }, new string[] { "", coinS, diamondS }, new string[] { "", "+5000", "30" }); break; }
                    case 26: { RankTabRewardItemShow(new bool[] { false, true, true }, new string[] { "", coinS, diamondS }, new string[] { "", "+5000", "30" }); break; }
                    case 27: { RankTabRewardItemShow(new bool[] { false, true, true }, new string[] { "", coinS, diamondS }, new string[] { "", "+5000", "30" }); break; }
                    case 28: { RankTabRewardItemShow(new bool[] { false, true, true }, new string[] { "", coinS, diamondS }, new string[] { "", "+5000", "30" }); break; }
                    case 29: { RankTabRewardItemShow(new bool[] { false, true, true }, new string[] { "", coinS, diamondS }, new string[] { "", "+5000", "30" }); break; }

                    //30위 아래는 아무런 리워드를 주지 않는다//
                    default: { RankTabRewardItemShow(new bool[] { false, false, false }, new string[] { "", "", "" }, new string[] { "", "", "" }); break; }
                }
            }

            if (i > 2)
            {
                friendRankTab.transform.FindChild("RankNumText").GetComponent<UILabel>().text = (i + 1).ToString();
                friendRankTab.transform.FindChild("TopRank").gameObject.SetActive(false);
            }
            else
            {
                friendRankTab.transform.FindChild("RankNumText").gameObject.SetActive(false);
                friendRankTab.transform.FindChild("TopRank").gameObject.SetActive(true);
                friendRankTab.transform.FindChild("TopRank").GetComponent<UISprite>().spriteName = "Icn_Rank" + (i + 1);
            }


            Debug.Log("fuelSendTime ::: " + friendData[i].NickName  +" ::: "+ fuelSendTime);
            if (myNick == friendData[i].NickName && myScore == friendData[i].TWeekScore)
            {
                friendRankTab.transform.FindChild("FriendRankBG").GetComponent<UISprite>().spriteName = "Bgr_Ranker_00";
                gasStatusOff.SetActive(false);
                fuelRemainTime.SetActive(false);
                gasStatusOn.SetActive(false);
            }

            else if(isFB ==false)
            {
                gasStatusOff.SetActive(false);
                fuelRemainTime.SetActive(false);
                gasStatusOn.SetActive(false);
            }
            //여기서 연료 보냄 여부를 감지하여 아이콘을 어떤것을 보일것인지 결정한다//
            else if (fuelSendTime == "" || fuelSendTime == null)
            {
                gasStatusOff.SetActive(false);
                fuelRemainTime.SetActive(false);
                gasStatusOn.SetActive(true);
            }
            else
            {
                
                System.DateTime nowTime = System.DateTime.UtcNow;
                System.DateTime fuelTime = DateTime.FromBinary(Convert.ToInt64(double.Parse(fuelSendTime)));

                Debug.Log(":: nowTime :: " + nowTime);
                Debug.Log(":: fuelTime :: " + fuelTime);
                
                fuelTime.AddMinutes(30);//다음 연료가 찰 시간//
                Debug.Log(":: fuelTime + 30min :: " + fuelTime.AddMinutes(30));

                if (nowTime < fuelTime.AddMinutes(30)) //이 조건은 아직 시간에 도달하지 못함을 뜻함//
                {
                    gasStatusOff.SetActive(true);
                    fuelRemainTime.SetActive(true);
                    fuelRemainTime.GetComponent<UILabel>().text = fuelTime.AddMinutes(30).Subtract(nowTime).Minutes + "m";
                    gasStatusOn.SetActive(false);
                }
                else
                {
                    gasStatusOff.SetActive(false);
                    fuelRemainTime.SetActive(false);
                    gasStatusOn.SetActive(true);
                }
            }
        }
    }

    void BubbleSorting(RankDataS[] friendData)
    {
        string myNick = ValueDeliverScript.Nick;
        int rLength = friendData.Length;
        Debug.Log("친구는 몇명인가? :: " + rLength + " ::");

        RankDataS temp;

        for (int j = 0; j < rLength; j++)
        {
            if (myNick == friendData[j].NickName)
            {
                friendData[j].TWeekScore = ValueDeliverScript.scoreHigh.ToString();
                break;
            }
        }

        for (int h = 0; h < rLength - 1; h++)
        {
            for (int i = 0; i < rLength - 1; i++)
            {
                int TWeekScore01 =0;
                int TWeekScore02 =0;
                int.TryParse(friendData[i].TWeekScore, out TWeekScore01);
                int.TryParse(friendData[i + 1].TWeekScore, out TWeekScore02);

                if (TWeekScore01 < TWeekScore02)
                {
                    temp = friendData[i];
                    friendData[i] = friendData[i + 1];
                    friendData[i + 1] = temp;
                }
            }
        }
    }


    //스킨의 락오프 여부를 검사해서 알려줌.
    public void FlightLockOffCheck()
    {
        int flightCount = GameObject.Find("Windows").transform.FindChild("WinMove/Flights/MoveTF/FlightsMove").childCount;

        for (int flightNumber = 0; flightNumber < flightCount; flightNumber++)
        {
            for (int skinNum = 1; skinNum <= 5; skinNum++)
            {
                int skinLock = 0;

                switch (flightNumber)
                {
                    case 0: switch (skinNum)
                        {
                            case 1: skinLock = ValueDeliverScript.FlightLock000Skin001; break;
                            case 2: skinLock = ValueDeliverScript.FlightLock000Skin002; break;
                            case 3: skinLock = ValueDeliverScript.FlightLock000Skin003; break;
                            case 4: skinLock = ValueDeliverScript.FlightLock000Skin004; break;
                            case 5: skinLock = ValueDeliverScript.FlightLock000Skin005; break;
                        } break;
                    case 1: switch (skinNum)
                        {
                            case 1: skinLock = ValueDeliverScript.FlightLock001Skin001; break;
                            case 2: skinLock = ValueDeliverScript.FlightLock001Skin002; break;
                            case 3: skinLock = ValueDeliverScript.FlightLock001Skin003; break;
                            case 4: skinLock = ValueDeliverScript.FlightLock001Skin004; break;
                            case 5: skinLock = ValueDeliverScript.FlightLock001Skin005; break;
                        } break;
                    case 2: switch (skinNum)
                        {
                            case 1: skinLock = ValueDeliverScript.FlightLock002Skin001; break;
                            case 2: skinLock = ValueDeliverScript.FlightLock002Skin002; break;
                            case 3: skinLock = ValueDeliverScript.FlightLock002Skin003; break;
                            case 4: skinLock = ValueDeliverScript.FlightLock002Skin004; break;
                            case 5: skinLock = ValueDeliverScript.FlightLock002Skin005; break;
                        } break;
                }

                if (skinLock != 1)
                {
                    bool ischeck = GetComponent<HangarManager>().SkinLockCheck(flightNumber, skinNum);
                }
            }
        }
    }

    public void Flight000Skin(int skinNumber, int skinLevel)
    {

        ValueDeliverScript.flight000Skin = skinNumber;
        ValueDeliverScript.skinNumber = skinNumber;
        ValueDeliverScript.skinLevel = skinLevel;
        flight000.renderer.material.mainTexture = flight000Skin[skinNumber];
    }

    public void Flight001Skin(int skinNumber, int skinLevel)
    {

        ValueDeliverScript.flight001Skin = skinNumber;
        ValueDeliverScript.skinNumber = skinNumber;
        ValueDeliverScript.skinLevel = skinLevel;
        flight001.renderer.material.mainTexture = flight001Skin[skinNumber];
    }

    public void Flight002Skin(int skinNumber, int skinLevel)
    {

        ValueDeliverScript.flight002Skin = skinNumber;
        ValueDeliverScript.skinNumber = skinNumber;
        ValueDeliverScript.skinLevel = skinLevel;
        flight002.renderer.material.mainTexture = flight002Skin[skinNumber];
    }

    public void SkinlockOffCount()//소유 스킨 갯수 표시.
    {
        //소유 스킨 갯수 표시.
        for (int fNum = 0; fNum < 3; fNum++)
        {
            int skinLockOffCon = 0;
            int lockOffNum = 1;
            for (int sNum = 1; sNum < 6; sNum++)
            {
                switch (fNum)
                {
                    case 0: switch (sNum)
                        {
                            case 1: skinLockOffCon = ValueDeliverScript.FlightLock000Skin001; break;
                            case 2: skinLockOffCon = ValueDeliverScript.FlightLock000Skin002; break;
                            case 3: skinLockOffCon = ValueDeliverScript.FlightLock000Skin003; break;
                            case 4: skinLockOffCon = ValueDeliverScript.FlightLock000Skin004; break;
                            case 5: skinLockOffCon = ValueDeliverScript.FlightLock000Skin005; break;
                        } break;
                    case 1: switch (sNum)
                        {
                            case 1: skinLockOffCon = ValueDeliverScript.FlightLock001Skin001; break;
                            case 2: skinLockOffCon = ValueDeliverScript.FlightLock001Skin002; break;
                            case 3: skinLockOffCon = ValueDeliverScript.FlightLock001Skin003; break;
                            case 4: skinLockOffCon = ValueDeliverScript.FlightLock001Skin004; break;
                            case 5: skinLockOffCon = ValueDeliverScript.FlightLock001Skin005; break;
                        } break;
                    case 2: switch (sNum)
                        {
                            case 1: skinLockOffCon = ValueDeliverScript.FlightLock002Skin001; break;
                            case 2: skinLockOffCon = ValueDeliverScript.FlightLock002Skin002; break;
                            case 3: skinLockOffCon = ValueDeliverScript.FlightLock002Skin003; break;
                            case 4: skinLockOffCon = ValueDeliverScript.FlightLock002Skin004; break;
                            case 5: skinLockOffCon = ValueDeliverScript.FlightLock002Skin005; break;
                        } break;
                }

                if (skinLockOffCon == 1)
                    lockOffNum++;
            }
            skinLockOffTag[fNum].GetComponent<UILabel>().text = lockOffNum.ToString() + "/6";
        }
        //소유 스킨 갯수 표시.
    }

}
